apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "appstudio, hacbs"
  name: init
spec:
  description: >-
    Initialize Pipeline Task, include flags for rebuild and auth. Generates image repository secret used by the PipelineRun.
  params:
    - name: image-url
      description: Image URL for build by PipelineRun
    - name: rebuild
      description: Rebuild the image if exists
      default: "false"
    - name: skip-checks
      description: skip checks against built image
      default: "false"
    - name: pipelinerun-name
      description: Name of current pipelinerun, should be "$(context.pipelineRun.name)"
    - name: pipelinerun-uid
      description: UID of current pipelinerun, should be "$(context.pipelineRun.uid)"
    - name: shared-secret
      default: redhat-appstudio-user-workload
      description: Shared resource secret for accessing user-workload image repository
  results:
    - name: build
      description: Defines if the image in param image-url should be built
    - name: container-registry-secret
      description: Name of secret with credentials
  volumes:
    - name: default-push-secret
  steps:
    - name: init
      image: registry.redhat.io/openshift4/ose-tools-rhel8:v4.12@sha256:4d89da145a14501b049397dc723a2b5feba1f2238c9f71659c9512bd27ca4e95
      volumeMounts:
        - name: default-push-secret
          mountPath: /secret/default-push-secret
      env:
        - name: PIPELINERUN_NAME
          value: $(params.pipelinerun-name)
        - name: PIPELINERUN_UID
          value: $(params.pipelinerun-uid)
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: REBUILD
          value: $(params.rebuild)
        - name: SKIP_CHECKS
          value: $(params.skip-checks)
      script: |
        #!/bin/bash
        echo "Build Initialize: $IMAGE_URL"
        echo
        echo "Create pipelinerun repository secret"
        SHARED=/secret/default-push-secret/.dockerconfigjson
        export DOCKER_CONFIG=/tmp/docker/
        mkdir -p $DOCKER_CONFIG
        if [ -f $SHARED ]; then
          jq -M -s '.[0] * .[1]' $SHARED /root/.docker/config.json > $DOCKER_CONFIG/config.json
        else
          cp /root/.docker/config.json $DOCKER_CONFIG/config.json
        fi
        oc create secret generic --from-file=$DOCKER_CONFIG/config.json $SHARED_PARAM $PIPELINERUN_NAME
        oc patch secret $PIPELINERUN_NAME -p "{\"metadata\": {\"ownerReferences\": [{\"apiVersion\": \"tekton.dev/v1beta1\", \"blockOwnerDeletion\": false, \"controller\": true, \"kind\": \"PipelineRun\", \"name\": \"$PIPELINERUN_NAME\", \"uid\": \"$PIPELINERUN_UID\" }]}}"
        echo -n $PIPELINERUN_NAME > $(results.container-registry-secret.path)

        echo "Determine if Image Already Exists"
        # Build the image when image does not exists or rebuild is set to true
        if ! oc image info $IMAGE_URL &>/dev/null || [ "$REBUILD" == "true" ] || [ "$SKIP_CHECKS" == "false" ]; then
          echo -n "true" > $(results.build.path)
        else
          echo -n "false" > $(results.build.path)
        fi
