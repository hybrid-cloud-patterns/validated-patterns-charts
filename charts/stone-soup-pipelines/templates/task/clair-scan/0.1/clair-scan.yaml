---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "appstudio, hacbs"
  name: clair-scan
spec:
  description: >-
    Scans container images for vulnerabilities using Clair, by comparing the components of container image against Clair's vulnerability databases.
  params:
    - name: image-digest
      description: Image digest to scan.
    - name: image-url
      description: Image URL.
    - name: docker-auth
      description: Folder where container authorization in config.json is stored.
      default: ""
  results:
    - name: HACBS_TEST_OUTPUT
      description: Tekton task test output.
    - name: CLAIR_SCAN_RESULT
      description: Clair scan result.
  steps:
    - name: get-vulnerabilities
      image: quay.io/redhat-appstudio/clair-in-ci:latest  # explicit floating tag, daily updates
      imagePullPolicy: Always
      env:
        - name: DOCKER_CONFIG
          value: $(params.docker-auth)
        - name: IMAGE_URL
          value: $(params.image-url)
        - name: IMAGE_DIGEST
          value: $(params.image-digest)
      script: |
        #!/usr/bin/env bash

        imagewithouttag=$(echo $IMAGE_URL | sed "s/\(.*\):.*/\1/" | tr -d '\n')
        # strip new-line escape symbol from parameter and save it to variable
        imageanddigest=$(echo $imagewithouttag@$IMAGE_DIGEST)

        clair-action report --image-ref=$imageanddigest --db-path=/tmp/matcher.db --format=quay | tee /tekton/home/clair-result.json || true
    - name: conftest-vulnerabilities
      image: quay.io/redhat-appstudio/hacbs-test:v1.0.12@sha256:8c833349cad40d34262548295cd4eb1bd330e42fbb221ef54e6caee15ae1d208
      securityContext:
        capabilities:
          add:
            - SETFCAP
      script: |
        if [ ! -s /tekton/home/clair-result.json ]; then
          echo "Previous step [get-vulnerabilities] failed: /tekton/home/clair-result.json is empty."
        else
          /usr/bin/conftest test --no-fail /tekton/home/clair-result.json \
          --policy /project/clair/vulnerabilities-check.rego --namespace required_checks \
          --output=json | tee /tekton/home/clair-vulnerabilities.json || true
        fi
    - name: test-format-result
      image: quay.io/redhat-appstudio/hacbs-test:v1.0.12@sha256:8c833349cad40d34262548295cd4eb1bd330e42fbb221ef54e6caee15ae1d208
      script: |
        #!/usr/bin/env bash
        . /utils.sh

        if [[ ! -f /tekton/home/clair-vulnerabilities.json ]]; then
          note="Task $(context.task.name) failed: /tekton/home/clair-vulnerabilities.json did not generate. For details, check Tekton task log."
          HACBS_TEST_OUTPUT=$(make_result_json -r "ERROR" -t "$note")
          echo "/tekton/home/clair-vulnerabilities.json did not generate correctly. For details, check conftest command in Tekton task log."
          echo "${HACBS_TEST_OUTPUT}" | tee $(results.HACBS_TEST_OUTPUT.path)
          exit 0
        fi

        jq -rce \
          '{vulnerabilities:{
              critical: (.[] | .failures? // [] | map(select(.metadata.details.name=="clair_critical_vulnerabilities").metadata."vulnerabilities_number" // 0)| add // 0),
              high: (.[] | .failures? // [] | map(select(.metadata.details.name=="clair_high_vulnerabilities").metadata."vulnerabilities_number" // 0)| add // 0),
              medium: (.[] | .failures? // [] | map(select(.metadata.details.name=="clair_medium_vulnerabilities").metadata."vulnerabilities_number" // 0)| add // 0),
              low: (.[] | .failures? // [] | map(select(.metadata.details.name=="clair_low_vulnerabilities").metadata."vulnerabilities_number" // 0)| add // 0)
            }}' /tekton/home/clair-vulnerabilities.json | tee $(results.CLAIR_SCAN_RESULT.path)

        note="Task $(context.task.name) completed: Refer to Tekton task result CLAIR_SCAN_RESULT for vulnerabilities scanned by Clair."
        HACBS_TEST_OUTPUT=$(make_result_json -r "SUCCESS" -t "$note")
        echo "${HACBS_TEST_OUTPUT}" | tee $(results.HACBS_TEST_OUTPUT.path)
