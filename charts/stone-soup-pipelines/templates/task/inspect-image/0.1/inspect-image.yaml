---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "appstudio, hacbs"
  name: inspect-image
spec:
  description: >-
    Inspects and analyzes manifest data of the container's source image, and its base image (if available) using Skopeo.
    An image's manifest data contains information about the layers that make up the image, the platforms for which the image is intended, and other metadata about the image.
  params:
    - name: IMAGE_URL
      description: Fully qualified image name.
    - name: IMAGE_DIGEST
      description: Image digest.
      type: string
    - name: DOCKER_AUTH
      description: Secret with config.json for container auth.
      type: string
  results:
    - description: Base image source image is built from.
      name: BASE_IMAGE
    - description: Base image repository URL.
      name: BASE_IMAGE_REPOSITORY
    - description: Tekton task test output.
      name: HACBS_TEST_OUTPUT
  workspaces:
    - name: source
  volumes:
    - name: registry-auth
      secret:
        secretName: $(params.DOCKER_AUTH)
        optional: true
  steps:
  - name: inspect-image
    image: quay.io/redhat-appstudio/hacbs-test:v1.0.12@sha256:8c833349cad40d34262548295cd4eb1bd330e42fbb221ef54e6caee15ae1d208
    workingDir: $(workspaces.source.path)/hacbs/$(context.task.name)
    securityContext:
      runAsUser: 0
      capabilities:
        add:
          - SETFCAP
    env:
      - name: DOCKER_CONFIG
        value: /secrets/registry-auth
      - name: IMAGE_URL
        value: $(params.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(params.IMAGE_DIGEST)

    volumeMounts:
      - mountPath: /secrets/registry-auth
        name: registry-auth

    script: |
      #!/usr/bin/env bash
      source /utils.sh
      IMAGE_INSPECT=image_inspect.json
      BASE_IMAGE_INSPECT=base_image_inspect.json
      RAW_IMAGE_INSPECT=raw_image_inspect.json

      IMAGE_URL="${IMAGE_URL}@${IMAGE_DIGEST}"
      # Given a tag and a the digest in the IMAGE_URL we opt to use the digest alone
      # this is because containers/image currently doesn't support image references
      # that contain both. See https://github.com/containers/image/issues/1736
      if [[ "${IMAGE_URL}" == *":"*"@"* ]]; then
        IMAGE_URL="${IMAGE_URL/:*@/@}"
      fi
      echo "Inspecting manifest for source image ${IMAGE_URL}."
      skopeo inspect --no-tags docker://"${IMAGE_URL}" > $IMAGE_INSPECT 2> stderr.txt || true
      skopeo inspect --no-tags --raw docker://"${IMAGE_URL}" > $RAW_IMAGE_INSPECT 2>> stderr.txt || true

      if [ ! -z $(cat stderr.txt) ]; then
        echo "Skopeo inspect failed, inspect-image test encountered the following error:"
        cat stderr.txt
        note="Task $(context.task.name) failed: Encountered errors while inspecting image. For details, check Tekton task log."
        HACBS_TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
        echo "${HACBS_TEST_OUTPUT}" | tee $(results.HACBS_TEST_OUTPUT.path)
        exit 0
      fi
      echo "Getting base image manifest for source image ${IMAGE_URL}."
      BASE_IMAGE_NAME="$(jq -r ".annotations.\"org.opencontainers.image.base.name\"" $RAW_IMAGE_INSPECT)"
      BASE_IMAGE_DIGEST="$(jq -r ".annotations.\"org.opencontainers.image.base.digest\"" $RAW_IMAGE_INSPECT)"
      if [ $BASE_IMAGE_NAME == 'null' ]; then
        echo "Cannot get base image info from annotations."
        echo "Cannot get base image info from Labels. For details, check source image ${IMAGE_URL}."
        BASE_IMAGE_NAME="$(jq -r ".Labels.\"org.opencontainers.image.base.name\"" $IMAGE_INSPECT)"
        BASE_IMAGE_DIGEST="$(jq -r ".annotations.\"org.opencontainers.image.base.digest\"" $IMAGE_INSPECT)"
        if [ "$BASE_IMAGE_NAME" == 'null' ]; then
          echo "Cannot get base image info from Labels. For details, check source image ${IMAGE_URL}."
          exit 0
        fi
      fi
      if [ -z "$BASE_IMAGE_NAME" ]; then
        echo "Source image ${IMAGE_URL} is built from scratch, so there is no base image."
        exit 0
      fi
      BASE_IMAGE="${BASE_IMAGE_NAME%:*}@$BASE_IMAGE_DIGEST"
      echo "The base image is $BASE_IMAGE. Fetch its manifest."
      skopeo inspect --no-tags docker://$BASE_IMAGE  > $BASE_IMAGE_INSPECT || true
      echo -n "$BASE_IMAGE" | tee $(results.BASE_IMAGE.path)

      BASE_IMAGE_REPOSITORY="$(jq -r '.Name | sub("[^/]+/"; "") | sub("[:@].*"; "")' "$BASE_IMAGE_INSPECT")"
      echo -n "$BASE_IMAGE_REPOSITORY" | tee $(results.BASE_IMAGE_REPOSITORY.path)

      note="Task $(context.task.name) completed: Check inspected JSON files under $(workspaces.source.path)/hacbs/$(context.task.name)."
      HACBS_TEST_OUTPUT=$(make_result_json -r SUCCESS -s 1 -t "$note")
      echo "${HACBS_TEST_OUTPUT}" | tee $(results.HACBS_TEST_OUTPUT.path)
