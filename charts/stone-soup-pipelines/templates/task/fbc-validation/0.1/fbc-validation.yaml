apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "appstudio, hacbs"
  name: fbc-validation
spec:
  description: >-
    Ensures file-based catalog (FBC) components are uniquely linted for proper construction as part of build pipeline.
    The manifest data of container images obtained previously (via Skopeo) from inspect-image task is checked using OpenShift Operator Framework's opm CLI tool.
  params:
    - name: IMAGE_URL
      description: Fully qualified image name.
    - name: IMAGE_DIGEST
      description: Image digest.
  results:
    - name: HACBS_TEST_OUTPUT
      description: Tekton task test output.
  workspaces:
    - name: workspace
  steps:
    - name: extract-and-check-binaries
      image: quay.io/redhat-appstudio/hacbs-test:v1.0.12@sha256:8c833349cad40d34262548295cd4eb1bd330e42fbb221ef54e6caee15ae1d208
      workingDir: $(workspaces.workspace.path)/hacbs/$(context.task.name)
      env:
        - name: IMAGE_URL
          value: $(params.IMAGE_URL)
        - name: IMAGE_DIGEST
          value: $(params.IMAGE_DIGEST)
      securityContext:
        runAsUser: 0
        capabilities:
          add:
            - SETFCAP
      resources:
        limits:
          memory: 4Gi
          cpu: '2'
        requests:
          memory: 512Mi
          cpu: 10m
      script: |
        #!/usr/bin/env bash
        set -o pipefail
        source /utils.sh

        ### Try to extract binaries with configs > check binaries functionality > check opm validate ###
        if [ ! -s ../inspect-image/image_inspect.json ]; then
          echo "File $(workspaces.source.path)/hacbs/inspect-image/image_inspect.json did not generate correctly. Check inspect-image task log."
          note="Task $(context.task.name) failed: $(workspaces.source.path)/hacbs/inspect-image/image_inspect.json did not generate correctly. For details, check Tekton task result HACBS_TEST_OUTPUT in task inspect-image."
          HACBS_TEST_OUTPUT=$(make_result_json -r ERROR -t "$note")
          echo "${HACBS_TEST_OUTPUT}" | tee $(results.HACBS_TEST_OUTPUT.path)
          exit 0
        fi

        conffolder=$(cat ../inspect-image/image_inspect.json | jq -r '.Labels ."operators.operatorframework.io.index.configs.v1"')
        if [ $? -ne 0 ]; then
          echo "Could not get labels from inspect-image/image_inspect.json. Make sure file exists and it contains this label: operators.operatorframework.io.index.configs.v1."
          HACBS_TEST_OUTPUT="$(make_result_json -r ERROR)"
          echo "${HACBS_TEST_OUTPUT}" | tee "$(results.HACBS_TEST_OUTPUT.path)"
          exit 0
        fi
        mkdir -p /tmp/image-content confdir
        pushd /tmp/image-content
        image_with_digest="${IMAGE_URL}@${IMAGE_DIGEST}"

        if ! oc image extract "${image_with_digest}" ; then
          echo "Unable to extract or validate extracted binaries."
          note="Task $(context.task.name) failed: Failed to extract image with oc extract command, so it cannot validate extracted binaries. For details, check Tekton task log."
          HACBS_ERROR_OUTPUT=$(make_result_json -r ERROR -t "$note")
          echo "${HACBS_TEST_OUTPUT}" | tee $(results.HACBS_TEST_OUTPUT.path)
          popd
          exit 0
        fi

        if [ -z "$(ls -A .$conffolder)" ]; then
          echo "$conffolder is missing catalog file."
          HACBS_TEST_OUTPUT="$(make_result_json -r ERROR)"
          echo "${HACBS_TEST_OUTPUT}" | tee "$(results.HACBS_TEST_OUTPUT.path)"
          popd
          exit 0
        fi
        # copy content of conffolder to confdir - will be used in next task - related image check
        cp -r .$conffolder/* $(workspaces.workspace.path)/hacbs/$(context.task.name)/confdir

        # We have totally 4 checks here currently
        check_num=4
        failure_num=0
        TESTPASSED=true

        if [[ ! $(find . -name "opm") ]]; then
          echo "!FAILURE! - opm binary presence check failed."
          failure_num=`expr $failure_num + 1`
          TESTPASSED=false
        fi
        if [[ ! $(find . -name "grpc_health_probe") ]]; then
          echo "!FAILURE! - grpc_health_probe binary presence check failed."
          failure_num=`expr $failure_num + 1`
          TESTPASSED=false
        fi
        if ! opm validate ."${conffolder}"; then
          echo "!FAILURE! - opm validate check failed."
          failure_num=`expr $failure_num + 1`
          TESTPASSED=false
        fi
        if ! opm render ."${conffolder}" | jq -en 'reduce (inputs | select(.schema == "olm.package")) as $obj (0; .+1) == 1'; then
          echo "!FAILURE! - More than one olm.packages is not permitted in a FBC fragment."
          failure_num=`expr $failure_num + 1`
          TESTPASSED=false
        fi
        note="Task $(context.task.name) completed: Check result for task result."
        if [ $TESTPASSED == false ]; then
          HACBS_ERROR_OUTPUT=$(make_result_json -r FAILURE -f $failure_num -s `expr $check_num - $failure_num` -t "$note")
          echo "${HACBS_ERROR_OUTPUT}" | tee $(results.HACBS_TEST_OUTPUT.path)
        else
          HACBS_TEST_OUTPUT=$(make_result_json -r SUCCESS -s $check_num -t "$note")
          echo "${HACBS_TEST_OUTPUT}" | tee $(results.HACBS_TEST_OUTPUT.path)
        fi
        popd
